import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

/**
 * Generates a text report from the field data
 * @param {Object} fieldData - The collected field data 
 * @param {String} comments - Optional comments to include in the report
 * @returns {Promise<String>} - The URI of the generated text file
 */
export const generateReport = async (fieldData, comments = '') => {
  try {
    // Create timestamp for the filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileName = `ai-forester-report-${timestamp}.txt`;
    const fileUri = `${FileSystem.documentDirectory}${fileName}`;
    
    // Generate plain text content
    let textContent = "AI FORESTER FIELD REPORT\n";
    textContent += `Generated on: ${new Date().toLocaleString()}\n\n`;
    
    // Add field data sections
    textContent += "LOCATION INFORMATION\n";
    if (fieldData.location) {
      textContent += `Latitude: ${fieldData.location.latitude || 'N/A'}\n`;
      textContent += `Longitude: ${fieldData.location.longitude || 'N/A'}\n`;
      textContent += `Elevation: ${fieldData.location.elevation || 'N/A'}\n`;
    }
    textContent += "\n";
    
    // Add stream measurements
    textContent += "STREAM MEASUREMENTS\n";
    if (fieldData.streamMeasurements) {
      textContent += `Average Top Width: ${fieldData.streamMeasurements.avgTopWidth || 'N/A'} m\n`;
      textContent += `Average Depth: ${fieldData.streamMeasurements.avgDepth || 'N/A'} m\n`;
      textContent += `Bottom Width: ${fieldData.streamMeasurements.bottomWidth || 'N/A'} m\n`;
      textContent += `Cross-sectional Area: ${fieldData.streamMeasurements.crossSectionalArea || 'N/A'} m²\n`;
    }
    textContent += "\n";
    
    // Add culvert results
    textContent += "CULVERT RESULTS\n";
    if (fieldData.culvertResults) {
      textContent += `Recommended Culvert Size: ${fieldData.culvertResults.recommendedSize || 'N/A'}\n`;
      textContent += `Calculation Method: ${fieldData.culvertResults.calculationMethod || 'N/A'}\n`;
      textContent += `Required Opening Area: ${fieldData.culvertResults.requiredOpeningArea || 'N/A'} m²\n`;
      textContent += `Professional Design Required: ${fieldData.culvertResults.professionalDesignRequired ? 'Yes' : 'No'}\n`;
    }
    textContent += "\n";
    
    // Add transport assessment
    textContent += "TRANSPORT AND DEBRIS ASSESSMENT\n";
    if (fieldData.transportAssessment) {
      textContent += `Bankfull Width Rating: ${fieldData.transportAssessment.bankfullWidthRating || 'N/A'}\n`;
      textContent += `Sediment in Storage Wedges: ${fieldData.transportAssessment.sedimentRating || 'N/A'}\n`;
      textContent += `Water-transported Woody Debris: ${fieldData.transportAssessment.woodyDebrisRating || 'N/A'}\n`;
      textContent += `Transport Index: ${fieldData.transportAssessment.transportIndex || 'N/A'}\n`;
      textContent += `Recommendations: ${fieldData.transportAssessment.recommendations || 'N/A'}\n`;
    }
    textContent += "\n";
    
    // Add comments if provided
    if (comments && comments.trim()) {
      textContent += "COMMENTS\n";
      textContent += `${comments}\n\n`;
    }
    
    textContent += "---------------------------------------\n";
    textContent += "Generated by AI Forester Field Companion App";
    
    // Write the file
    await FileSystem.writeAsStringAsync(fileUri, textContent);
    
    return fileUri;
  } catch (error) {
    console.error('Error generating text report:', error);
    throw new Error('Failed to generate report');
  }
};

/**
 * Shares the generated report with other apps
 * @param {String} fileUri - The URI of the report file to share
 */
export const shareReport = async (fileUri) => {
  try {
    if (!(await Sharing.isAvailableAsync())) {
      alert('Sharing is not available on this device');
      return;
    }
    
    await Sharing.shareAsync(fileUri);
  } catch (error) {
    console.error('Error sharing report:', error);
    throw new Error('Failed to share report');
  }
};